@mixin Flex($flow, $justify, $align) {
  display: flex;
  flex-flow: $flow;
  justify-content: $justify;
  align-items: $align;
}

@mixin clamp-line($line-num, $max-height) {
  display: -webkit-box;
  max-height: $max-height;
  overflow: hidden;
  -webkit-line-clamp: $line-num;
  -webkit-box-orient: vertical;
}

@mixin multiline-ellipsis($line) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $line;
  -webkit-box-orient: vertical;
}

@mixin bg-img($background: no-repeat center center, $size: cover) {
  background: $background;
  background-size: $size;
}

@mixin text-fill($color) {
  background: $color;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

@mixin text-fill-linear($color1, $color2) {
  @include text-fill(linear-gradient(to bottom, $color1, $color2));
}

// mixin for triangles
$opposite-direction: (top: bottom, right: left, bottom: top, left: right);
@mixin triangle($size, $color, $direction: bottom) {
  $height: $size / 2;
  content: '';
  width: 0;
  height: 0;
  display: inline-block;
  border: $height solid transparent;
  border-#{$direction}: none;
  border-#{map-get($opposite-direction, $direction)}: $height solid $color;
}

@mixin square($size: 8px, $color: cyan, $transform: none) {
  content: '';
  display: inline-block;
  width: $size;
  height: $size;
  background: $color;
  transform: $transform;
}
@mixin diamond($size: 8px, $color: cyan, $translate: (0,0)) {
  @include square($size, $color, $transform: translate($translate) scale(1,1) rotate(45deg))
}


$pi: 3.14159265359;

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  @if $unit == deg {
    $unitless: $unitless / 180 * $pi;
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}

@function fabs($x) {
  @if $x > 0 {
    @return $x;
  } @else {
    @return $x * -1;
  }
}

@function sqrt($x) {
  $ans: $x;
  $del: 0.00001;
  $pre: 0;
  @while fabs($ans - $pre) >= $del {
    $pre: $ans;
    $ans: ($ans + $x / $ans) / 2;
  }
  @return $ans;
}

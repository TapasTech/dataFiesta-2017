$default-color1: cyan;
$default-color2: black;

// 绝对定位元素
@mixin abs-locate($left: 0, $top: 0) {
  position: absolute;
  left: $left;
  top: $top;
}

// 以vw为单位进行绝对定位，参数为设计稿上的像素值
@mixin abs-locate-vw($left: 0, $top: 0, $w-origin: 1440, $W: 100vw) {
  // $w-origin: 设计稿的像素宽度
  @include abs-locate($left / $w-origin * $W, $top / $w-origin * $W);
}

// 以px为单位进行绝对定位
@mixin abs-locate-px($left: 0, $top: 0) {
  @include abs-locate(#{$left}px, #{$top}px);
}

// flex布局
@mixin Flex($flow: row, $justify: flex-start, $align: flex-start) {
  display: flex;
  flex-flow: $flow;
  justify-content: $justify;
  align-items: $align;
}

// 限定容器最大行数与高度
@mixin clamp-line($line-num, $max-height) {
  display: -webkit-box;
  max-height: $max-height;
  overflow: hidden;
  -webkit-line-clamp: $line-num;
  -webkit-box-orient: vertical;
}

// 溢出容器文本显示省略号
@mixin multiline-ellipsis($line) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $line;
  -webkit-box-orient: vertical;
}

// 为容器设置背景图片的常用方法
@mixin bg-img($background: no-repeat center center, $size: cover, $url:'') {
  background: $background;
  background-size: $size;
  @if($url) {
    background-image: url($url);
  }
}

// 文字填充自定义颜色
@mixin text-fill($color) {
  background: $color;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

// 文字填充线性渐变颜色
@mixin text-fill-linear($color1, $color2) {
  @include text-fill(linear-gradient(to bottom, $color1, $color2));
}

// 绘制等腰直角三角形
$opposite-direction-map: (top: bottom, right: left, bottom: top, left: right);
@mixin triangle($size: 24px, $color: $default-color1, $direction: bottom) {
  $height: $size / 2;
  content: '';
  width: 0;
  height: 0;
  display: inline-block;
  border: $height solid transparent;
  border-#{$direction}: none;
  border-#{map-get($opposite-direction-map, $direction)}: $height solid $color;
}

// 绘制空心的等腰直角三角形
@mixin hollow-triangle($arrow-size: 24px, $frame-width: 2px, $direction: left, $innerColor: $default-color2) {
  // only available for non-pseudo elements
  position: relative;
  @include triangle($size: $arrow-size, $direction: $direction);
  &:after {
    $inner-size: $arrow-size - 2 * $frame-width;
    position: absolute;
    #{$direction}: $frame-width/2;
    top: -$inner-size/2;
    @include triangle($color: $innerColor, $size: $inner-size, $direction: $direction)
  }
}

// 绘制正方形
@mixin square($size: 8px, $color: $default-color1, $transform: none) {
  content: '';
  display: inline-block;
  width: $size;
  height: $size;
  background: $color;
  transform: $transform;
}

// 绘制菱形
@mixin diamond($size: 8px, $color: $default-color1, $translate: (0,0)) {
  @include square($size, $color, $transform: translate($translate) scale(1, 1) rotate(45deg))
}

$pi: 3.14159265359;

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  @if $unit == deg {
    $unitless: $unitless / 180 * $pi;
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}

@function fabs($x) {
  @if $x > 0 {
    @return $x;
  } @else {
    @return $x * -1;
  }
}

@function sqrt($x) {
  $ans: $x;
  $del: 0.00001;
  $pre: 0;
  @while fabs($ans - $pre) >= $del {
    $pre: $ans;
    $ans: ($ans + $x / $ans) / 2;
  }
  @return $ans;
}
